'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

exports.assignAttributes = assignAttributes;
exports.can_have_Attributes = can_have_Attributes;
exports.can_have_InnerAttributes = can_have_InnerAttributes;
exports.can_have_OuterAttributes = can_have_OuterAttributes;
exports.countActualNodeChildren = countActualNodeChildren;
exports.countRawLiteralHashtags = countRawLiteralHashtags;
exports.deleteAttributes = deleteAttributes;
exports.each_childNode = each_childNode;
exports.each_node = each_node;
exports.end = end;
exports.getActualNodeChildren = getActualNodeChildren;
exports.getAstPath = getAstPath;
exports.getBodyOrCases = getBodyOrCases;
exports.getDelimChars = getDelimChars;
exports.getFirstParameter = getFirstParameter;
exports.getLastParameter = getLastParameter;
exports.getLeftMostCondition = getLeftMostCondition;
exports.getMacroName = getMacroName;
exports.getNodeChildren = getNodeChildren;
exports.getOwnChildAstPath = getOwnChildAstPath;
exports.getParameters = getParameters;
exports.getParenthesizedNodeContent = getParenthesizedNodeContent;
exports.getPrecedence = getPrecedence;
exports.hasAttributes = hasAttributes;
exports.hasBody = hasBody;
exports.hasChildren = hasChildren;
exports.hasCondition = hasCondition;
exports.hasExpression = hasExpression;
exports.hasGenerics = hasGenerics;
exports.hasInnerAttributes = hasInnerAttributes;
exports.hasItems = hasItems;
exports.hasLetScrutineeCondition = hasLetScrutineeCondition;
exports.hasMethod = hasMethod;
exports.hasOuterAttributes = hasOuterAttributes;
exports.hasOwnStart = hasOwnStart;
exports.hasParameters = hasParameters;
exports.hasProperties = hasProperties;
exports.hasSelfParameter = hasSelfParameter;
exports.hasSemiNoBody = hasSemiNoBody;
exports.hasSemiNoProperties = hasSemiNoProperties;
exports.hasSuffix = hasSuffix;
exports.hasTypeBounds = hasTypeBounds;
exports.includesTK = includesTK;
exports.insertNode = insertNode;
exports.insertNodes = insertNodes;
exports.isDangling = isDangling;
exports.isInner = isInner;
exports.isLocEqual = isLocEqual;
exports.isOuter = isOuter;
exports.isTK = isTK;
exports.is_AmbientImport = is_AmbientImport;
exports.is_AndExpression = is_AndExpression;
exports.is_AnonymousImport = is_AnonymousImport;
exports.is_ArrayLikeNode = is_ArrayLikeNode;
exports.is_ArrayLiteral = is_ArrayLiteral;
exports.is_ArrayOrTupleLiteral = is_ArrayOrTupleLiteral;
exports.is_ArrayPattern = is_ArrayPattern;
exports.is_Attribute = is_Attribute;
exports.is_AttributeOrComment = is_AttributeOrComment;
exports.is_AttributeOrDocComment = is_AttributeOrDocComment;
exports.is_AutoTraitDeclaration = is_AutoTraitDeclaration;
exports.is_AwaitExpression = is_AwaitExpression;
exports.is_BareTypeTraitBound = is_BareTypeTraitBound;
exports.is_BitwiseOperator = is_BitwiseOperator;
exports.is_BlockCommentKind = is_BlockCommentKind;
exports.is_BlockCommentNode = is_BlockCommentNode;
exports.is_BlockExpression = is_BlockExpression;
exports.is_BoxExpression = is_BoxExpression;
exports.is_BoxPattern = is_BoxPattern;
exports.is_BreakExpression = is_BreakExpression;
exports.is_CallExpression = is_CallExpression;
exports.is_CaseBlock = is_CaseBlock;
exports.is_ClosureBlock = is_ClosureBlock;
exports.is_ClosureFunctionExpression = is_ClosureFunctionExpression;
exports.is_ClosureFunctionParameterDeclaration = is_ClosureFunctionParameterDeclaration;
exports.is_Comment = is_Comment;
exports.is_CommentOrDocComment = is_CommentOrDocComment;
exports.is_ComparisonExpression = is_ComparisonExpression;
exports.is_ConstTypeParameterDeclaration = is_ConstTypeParameterDeclaration;
exports.is_ConstVariableDeclaration = is_ConstVariableDeclaration;
exports.is_ContinueExpression = is_ContinueExpression;
exports.is_DeclarationNode = is_DeclarationNode;
exports.is_DelimGroup = is_DelimGroup;
exports.is_DereferenceExpression = is_DereferenceExpression;
exports.is_DestructuredImport = is_DestructuredImport;
exports.is_DocCommentAttribute = is_DocCommentAttribute;
exports.is_ElseBlock = is_ElseBlock;
exports.is_EnumDeclaration = is_EnumDeclaration;
exports.is_EnumDeclarationMember = is_EnumDeclarationMember;
exports.is_EnumMemberDeclaration = is_EnumMemberDeclaration;
exports.is_EnumMemberStructDeclaration = is_EnumMemberStructDeclaration;
exports.is_EnumMemberTupleDeclaration = is_EnumMemberTupleDeclaration;
exports.is_EqualityOperator = is_EqualityOperator;
exports.is_ExpressionAsTypeCast = is_ExpressionAsTypeCast;
exports.is_ExpressionNamespaceTarget = is_ExpressionNamespaceTarget;
exports.is_ExpressionNamespaceTargetNoSelector = is_ExpressionNamespaceTargetNoSelector;
exports.is_ExpressionNode = is_ExpressionNode;
exports.is_ExpressionPath = is_ExpressionPath;
exports.is_ExpressionStatement = is_ExpressionStatement;
exports.is_ExpressionTypeCast = is_ExpressionTypeCast;
exports.is_ExpressionTypeSelector = is_ExpressionTypeSelector;
exports.is_ExpressionWithBody = is_ExpressionWithBody;
exports.is_ExpressionWithBodyOrCases = is_ExpressionWithBodyOrCases;
exports.is_ExpressionWithBodyOrCases_or_BlockLikeMacroInvocation = is_ExpressionWithBodyOrCases_or_BlockLikeMacroInvocation;
exports.is_ExternBlockDeclaration = is_ExternBlockDeclaration;
exports.is_ExternCrateStatement = is_ExternCrateStatement;
exports.is_ExternSpecifier = is_ExternSpecifier;
exports.is_FlowControlExpression = is_FlowControlExpression;
exports.is_FlowControlMaybeValueExpression = is_FlowControlMaybeValueExpression;
exports.is_ForInBlockExpression = is_ForInBlockExpression;
exports.is_FunctionDeclaration = is_FunctionDeclaration;
exports.is_FunctionLikeNode = is_FunctionLikeNode;
exports.is_FunctionNode = is_FunctionNode;
exports.is_FunctionParameterDeclaration = is_FunctionParameterDeclaration;
exports.is_FunctionParameterNode = is_FunctionParameterNode;
exports.is_FunctionSelfParameterDeclaration = is_FunctionSelfParameterDeclaration;
exports.is_FunctionSpread = is_FunctionSpread;
exports.is_GenericLtParameterDeclaration = is_GenericLtParameterDeclaration;
exports.is_GenericParameterDeclaration = is_GenericParameterDeclaration;
exports.is_GenericTypeParameterDeclaration = is_GenericTypeParameterDeclaration;
exports.is_Identifier = is_Identifier;
exports.is_IdentifierOrIndex = is_IdentifierOrIndex;
exports.is_IdentifierOrItemPath = is_IdentifierOrItemPath;
exports.is_IfBlockExpression = is_IfBlockExpression;
exports.is_ImplDeclaration = is_ImplDeclaration;
exports.is_ImplDeclarationNode = is_ImplDeclarationNode;
exports.is_ImplicitReturnAbleNode = is_ImplicitReturnAbleNode;
exports.is_ImportNode = is_ImportNode;
exports.is_Index = is_Index;
exports.is_ItemPath = is_ItemPath;
exports.is_LargerLesserOperator = is_LargerLesserOperator;
exports.is_LbIdentifier = is_LbIdentifier;
exports.is_LeftRightExpression = is_LeftRightExpression;
exports.is_LetScrutinee = is_LetScrutinee;
exports.is_LetVariableDeclaration = is_LetVariableDeclaration;
exports.is_Lifetime = is_Lifetime;
exports.is_LineCommentKind = is_LineCommentKind;
exports.is_LineCommentNode = is_LineCommentNode;
exports.is_Literal = is_Literal;
exports.is_LiteralBooleanLike = is_LiteralBooleanLike;
exports.is_LiteralNumberLike = is_LiteralNumberLike;
exports.is_LiteralRawStringLike = is_LiteralRawStringLike;
exports.is_LiteralStringLike = is_LiteralStringLike;
exports.is_Loc = is_Loc;
exports.is_LocArray = is_LocArray;
exports.is_Located = is_Located;
exports.is_LogicalExpression = is_LogicalExpression;
exports.is_LoopBlockExpression = is_LoopBlockExpression;
exports.is_LtElided = is_LtElided;
exports.is_LtIdentifier = is_LtIdentifier;
exports.is_LtStatic = is_LtStatic;
exports.is_MacroDeclaration = is_MacroDeclaration;
exports.is_MacroGroup = is_MacroGroup;
exports.is_MacroInlineRuleDeclaration = is_MacroInlineRuleDeclaration;
exports.is_MacroInvocation = is_MacroInvocation;
exports.is_MacroInvocation_BlockLike = is_MacroInvocation_BlockLike;
exports.is_MacroParameterDeclaration = is_MacroParameterDeclaration;
exports.is_MacroRule = is_MacroRule;
exports.is_MacroRuleDeclaration = is_MacroRuleDeclaration;
exports.is_MacroRulesDeclaration = is_MacroRulesDeclaration;
exports.is_MatchExpression = is_MatchExpression;
exports.is_MatchExpressionCase = is_MatchExpressionCase;
exports.is_MaybeAsyncNode = is_MaybeAsyncNode;
exports.is_MaybeExternNode = is_MaybeExternNode;
exports.is_MaybeMoveNode = is_MaybeMoveNode;
exports.is_MaybePubNode = is_MaybePubNode;
exports.is_MaybeStaticNode = is_MaybeStaticNode;
exports.is_MaybeUnsafeNode = is_MaybeUnsafeNode;
exports.is_McIdentifier = is_McIdentifier;
exports.is_MemberExpression = is_MemberExpression;
exports.is_MinusExpression = is_MinusExpression;
exports.is_MinusPattern = is_MinusPattern;
exports.is_MissingNode = is_MissingNode;
exports.is_ModuleDeclaration = is_ModuleDeclaration;
exports.is_NamedImport = is_NamedImport;
exports.is_NegativeImplDeclaration = is_NegativeImplDeclaration;
exports.is_Node = is_Node;
exports.is_NodeWithBody = is_NodeWithBody;
exports.is_NodeWithBodyNoBody = is_NodeWithBodyNoBody;
exports.is_NodeWithBodyOrCases = is_NodeWithBodyOrCases;
exports.is_NodeWithCondition = is_NodeWithCondition;
exports.is_NodeWithMaybePatternNoUnionBody = is_NodeWithMaybePatternNoUnionBody;
exports.is_NodeWithSegments = is_NodeWithSegments;
exports.is_NodeWithTypeBounds = is_NodeWithTypeBounds;
exports.is_NotExpression = is_NotExpression;
exports.is_ObjectNode = is_ObjectNode;
exports.is_OperationExpression = is_OperationExpression;
exports.is_OrExpression = is_OrExpression;
exports.is_ParenthesizedExpression = is_ParenthesizedExpression;
exports.is_ParenthesizedNode = is_ParenthesizedNode;
exports.is_ParenthesizedPattern = is_ParenthesizedPattern;
exports.is_PathNode = is_PathNode;
exports.is_PatternNoUnion = is_PatternNoUnion;
exports.is_PatternNoUnionNoRange = is_PatternNoUnionNoRange;
exports.is_PatternNode = is_PatternNode;
exports.is_PatternVariableDeclaration = is_PatternVariableDeclaration;
exports.is_PostfixExpression = is_PostfixExpression;
exports.is_Program = is_Program;
exports.is_PubSpecifier = is_PubSpecifier;
exports.is_PunctuationToken = is_PunctuationToken;
exports.is_RangeLiteral = is_RangeLiteral;
exports.is_RangeNode = is_RangeNode;
exports.is_RangePattern = is_RangePattern;
exports.is_RangePatternBound = is_RangePatternBound;
exports.is_RawReferenceExpression = is_RawReferenceExpression;
exports.is_ReassignmentExpression = is_ReassignmentExpression;
exports.is_ReassignmentNode = is_ReassignmentNode;
exports.is_ReassignmentOperationExpression = is_ReassignmentOperationExpression;
exports.is_ReferenceExpression = is_ReferenceExpression;
exports.is_ReferencePattern = is_ReferencePattern;
exports.is_RestPattern = is_RestPattern;
exports.is_ReturnExpression = is_ReturnExpression;
exports.is_Shebang = is_Shebang;
exports.is_SizedArrayLiteral = is_SizedArrayLiteral;
exports.is_Snippet = is_Snippet;
exports.is_SourceFile = is_SourceFile;
exports.is_StatementNode = is_StatementNode;
exports.is_StaticVariableDeclaration = is_StaticVariableDeclaration;
exports.is_StructDeclaration = is_StructDeclaration;
exports.is_StructLiteral = is_StructLiteral;
exports.is_StructLiteralProperty = is_StructLiteralProperty;
exports.is_StructLiteralPropertyShorthand = is_StructLiteralPropertyShorthand;
exports.is_StructLiteralPropertySpread = is_StructLiteralPropertySpread;
exports.is_StructLiteralRestUnassigned = is_StructLiteralRestUnassigned;
exports.is_StructPattern = is_StructPattern;
exports.is_StructPatternProperty = is_StructPatternProperty;
exports.is_StructPatternPropertyDestructured = is_StructPatternPropertyDestructured;
exports.is_StructPatternPropertyShorthand = is_StructPatternPropertyShorthand;
exports.is_StructProperty = is_StructProperty;
exports.is_StructPropertyDeclaration = is_StructPropertyDeclaration;
exports.is_TraitAliasDeclaration = is_TraitAliasDeclaration;
exports.is_TraitDeclaration = is_TraitDeclaration;
exports.is_TraitDeclarationNode = is_TraitDeclarationNode;
exports.is_TryBlockExpression = is_TryBlockExpression;
exports.is_TupleLiteral = is_TupleLiteral;
exports.is_TupleNode = is_TupleNode;
exports.is_TuplePattern = is_TuplePattern;
exports.is_TupleStructDeclaration = is_TupleStructDeclaration;
exports.is_TupleStructItemDeclaration = is_TupleStructItemDeclaration;
exports.is_TypeAliasDeclaration = is_TypeAliasDeclaration;
exports.is_TypeBound = is_TypeBound;
exports.is_TypeBoundsStandaloneNode = is_TypeBoundsStandaloneNode;
exports.is_TypeCall = is_TypeCall;
exports.is_TypeCallNamedArgument = is_TypeCallNamedArgument;
exports.is_TypeCallNamedBound = is_TypeCallNamedBound;
exports.is_TypeDereferenceConst = is_TypeDereferenceConst;
exports.is_TypeDereferenceMut = is_TypeDereferenceMut;
exports.is_TypeDynBounds = is_TypeDynBounds;
exports.is_TypeFnPointer = is_TypeFnPointer;
exports.is_TypeFnPointerParameter = is_TypeFnPointerParameter;
exports.is_TypeFunction = is_TypeFunction;
exports.is_TypeFunctionNode = is_TypeFunctionNode;
exports.is_TypeImplBounds = is_TypeImplBounds;
exports.is_TypeInferred = is_TypeInferred;
exports.is_TypeNamespaceTarget = is_TypeNamespaceTarget;
exports.is_TypeNamespaceTargetNoSelector = is_TypeNamespaceTargetNoSelector;
exports.is_TypeNever = is_TypeNever;
exports.is_TypeNode = is_TypeNode;
exports.is_TypeParenthesized = is_TypeParenthesized;
exports.is_TypePath = is_TypePath;
exports.is_TypeReference = is_TypeReference;
exports.is_TypeSizedArray = is_TypeSizedArray;
exports.is_TypeSlice = is_TypeSlice;
exports.is_TypeTraitBound = is_TypeTraitBound;
exports.is_TypeTuple = is_TypeTuple;
exports.is_UnaryExpression = is_UnaryExpression;
exports.is_UnaryPattern = is_UnaryPattern;
exports.is_UnaryType = is_UnaryType;
exports.is_UnassignedExpression = is_UnassignedExpression;
exports.is_UnionDeclaration = is_UnionDeclaration;
exports.is_UnionPattern = is_UnionPattern;
exports.is_UnwrapExpression = is_UnwrapExpression;
exports.is_UseStatement = is_UseStatement;
exports.is_VariableDeclarationNode = is_VariableDeclarationNode;
exports.is_WhereBoundDeclaration = is_WhereBoundDeclaration;
exports.is_WhereLtBoundDeclaration = is_WhereLtBoundDeclaration;
exports.is_WhereTypeBoundDeclaration = is_WhereTypeBoundDeclaration;
exports.is_WhileBlockExpression = is_WhileBlockExpression;
exports.is_WildcardPattern = is_WildcardPattern;
exports.is_YieldExpression = is_YieldExpression;
exports.is_bitshiftOperator = is_bitshiftOperator;
exports.is_multiplicativeOperator = is_multiplicativeOperator;
exports.nisAnyOf = nisAnyOf;
exports.ownStart = ownStart;
exports.reassignNodeProperty = reassignNodeProperty;
exports.setRange = setRange;
exports.setRangeEnd = setRangeEnd;
exports.setRangeStart = setRangeStart;
exports.start = start;
exports.transferAttributes = transferAttributes;
exports.unsafe_setRangeEnd = unsafe_setRangeEnd;
exports.unsafe_setRangeStart = unsafe_setRangeStart;
exports.unsafe_set_nodeType = unsafe_set_nodeType;