import { CharCode } from "./CharCode";
import { assert } from "./common";

export type Unicode_ws = 133 | 8206 | 8207 | 8232 | 8233;
export type CharcodeOrUnicodeWhitespace = CharCode | Unicode_ws;

export const UTF8BOM = "\uFEFF";
export const CharCode_UTF8BOM = 65279;

const enum FLAGS {
	None = 0,
	XID_Start = 1,
	XID_Continue = 2,
}

let did_init = false;
let XID = new Uint8Array(0);

function INIT_UNICODE() {
	type InitRange = number | [number, number];
	__DEV__: assert(did_init === false);
	did_init = true;
	XID = new Uint8Array(17 << 16); // 1_114_112
	const {
		0: Common,
		1: Start,
		2: Continue,
	}: [InitRange[], InitRange[], InitRange[]] = JSON.parse(
		"[[[65,90],[97,122],170,181,186,[192,214],[216,246],[248,705],[710,721],[736,740],748,750,[886,887],[891,893],895,908,[910,929],[931,1013],[1015,1153],[1162,1327],[1329,1366],1369,[1376,1416],[1488,1514],[1519,1522],1791,2042,[2144,2154],[2208,2228],[2230,2247],[2437,2444],[2447,2448],[2451,2472],[2474,2480],2482,[2486,2489],[2524,2525],2556,[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],2654,[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],2768,[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2908,2909],2929,[2949,2954],[2958,2960],[2962,2965],[2969,2970],2972,[2974,2975],[2979,2980],[2984,2986],[2990,3001],3024,[3086,3088],[3090,3112],[3114,3129],[3160,3162],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],3294,[3313,3314],[3342,3344],[3450,3455],[3461,3478],[3482,3505],[3507,3515],3517,[3520,3526],[3713,3714],3716,[3718,3722],[3724,3747],3749,[3776,3780],3782,[3804,3807],3840,[3913,3948],[4256,4293],4295,4301,[4304,4346],[4348,4680],[4682,4685],[4688,4694],4696,[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],4800,[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5109],[5112,5117],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5870,5880],[5888,5900],[5984,5996],[5998,6000],6103,[6176,6264],[6320,6389],[6400,6430],[6512,6516],[6528,6571],[6576,6601],6823,[7296,7304],[7312,7354],[7357,7359],[7960,7965],[7968,8005],[8008,8013],[8016,8023],8025,8027,8029,[8031,8061],[8064,8116],[8118,8124],8126,[8130,8132],[8134,8140],[8144,8147],[8150,8155],[8160,8172],[8178,8180],[8182,8188],8305,8319,[8336,8348],8450,8455,[8458,8467],8469,[8472,8477],8484,8486,8488,[8490,8505],[8508,8511],[8517,8521],8526,[8544,8584],[11264,11310],[11312,11358],[11360,11492],[11520,11557],11559,11565,[11568,11623],11631,[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[12293,12295],[12337,12341],[12344,12348],[12353,12438],[12445,12447],[12449,12538],[12540,12543],[12549,12591],[12593,12686],[12704,12735],[12784,12799],[13312,19903],[19968,40956],[40960,42124],[42192,42237],[42240,42508],[42775,42783],[42786,42888],[42891,42943],[42946,42954],[43072,43123],43259,[43360,43388],[43616,43638],[43739,43741],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43824,43866],[43868,43881],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64256,64262],[64275,64279],[64298,64310],[64312,64316],64318,[64320,64321],[64323,64324],[64326,64433],[64467,64605],[64612,64829],[64848,64911],[64914,64967],[65008,65017],65137,65139,65143,65145,65147,65149,[65151,65276],[65313,65338],[65345,65370],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[65856,65908],[66176,66204],[66208,66256],[66304,66335],[66349,66378],[66432,66461],[66464,66499],[66504,66511],[66513,66517],[66560,66717],[66736,66771],[66776,66811],[66816,66855],[66864,66915],[67072,67382],[67392,67413],[67424,67431],[67584,67589],67592,[67594,67637],[67639,67640],67644,[67647,67669],[67680,67702],[67712,67742],[67808,67826],[67828,67829],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68117,68119],[68121,68149],[68192,68220],[68224,68252],[68288,68295],[68352,68405],[68416,68437],[68448,68466],[68480,68497],[68608,68680],[68736,68786],[68800,68850],[69248,69289],[69296,69297],[69376,69404],69415,[69552,69572],[69600,69622],[69840,69864],70006,70108,[70144,70161],[70272,70278],70280,[70282,70285],[70287,70301],[70303,70312],[70405,70412],[70415,70416],[70419,70440],[70442,70448],[70450,70451],[70453,70457],70480,70855,71236,[71424,71450],[71935,71942],71945,[71948,71955],[71957,71958],[72096,72103],72349,[72384,72440],[72704,72712],[72818,72847],[72960,72966],[72968,72969],[73056,73061],[73063,73064],73648,[73728,74649],[74752,74862],[74880,75075],[77824,78894],[82944,83526],[92160,92728],[92736,92766],[92880,92909],[92992,92995],[93027,93047],[93053,93071],[93760,93823],[93952,94026],[94176,94177],[94208,100343],[100352,101589],[101632,101640],[110592,110878],[110928,110930],[110948,110951],[110960,111355],[113664,113770],[113776,113788],[113792,113800],[113808,113817],[119808,119892],[119894,119964],[119966,119967],119970,[119973,119974],[119977,119980],[119982,119993],119995,[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],120134,[120138,120144],[120146,120485],[120488,120512],[120514,120538],[120540,120570],[120572,120596],[120598,120628],[120630,120654],[120656,120686],[120688,120712],[120714,120744],[120746,120770],[120772,120779],[123136,123180],123214,[124928,125124],[126464,126467],[126469,126495],[126497,126498],126500,126503,[126505,126514],[126516,126519],126521,126523,126530,126535,126537,126539,[126541,126543],[126545,126546],126548,126551,126553,126555,126557,126559,[126561,126562],126564,[126567,126570],[126572,126578],[126580,126583],[126585,126588],126590,[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[131072,173789],[173824,177972],[177984,178205],[178208,183969],[183984,191456],[194560,195101],[196608,201546]],[[880,884],902,[904,906],[1568,1610],[1646,1647],[1649,1747],1749,[1765,1766],[1774,1775],[1786,1788],1808,[1810,1839],[1869,1957],1969,[1994,2026],[2036,2037],[2048,2069],2074,2084,2088,[2112,2136],[2308,2361],2365,2384,[2392,2401],[2417,2432],2493,2510,[2527,2529],[2544,2545],[2674,2676],2749,[2784,2785],2809,2877,[2911,2913],2947,[3077,3084],3133,[3168,3169],3200,3261,[3296,3297],[3332,3340],[3346,3386],3389,3406,[3412,3414],[3423,3425],[3585,3632],3634,[3648,3654],[3751,3760],3762,3773,[3904,3911],[3976,3980],[4096,4138],4159,[4176,4181],[4186,4189],4193,[4197,4198],[4206,4208],[4213,4225],4238,[5902,5905],[5920,5937],[5952,5969],[6016,6067],6108,[6272,6312],6314,[6480,6509],[6656,6678],[6688,6740],[6917,6963],[6981,6987],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7293],[7401,7404],[7406,7411],[7413,7414],7418,[7424,7615],[7680,7957],[11499,11502],[11506,11507],[11648,11670],[12321,12329],[42512,42527],[42538,42539],[42560,42606],[42623,42653],[42656,42735],[42997,43009],[43011,43013],[43015,43018],[43020,43042],[43138,43187],[43250,43255],[43261,43262],[43274,43301],[43312,43334],[43396,43442],43471,[43488,43492],[43494,43503],[43514,43518],[43520,43560],[43584,43586],[43588,43595],43642,[43646,43695],43697,[43701,43702],[43705,43709],43712,43714,[43744,43754],[43762,43764],[43888,44002],64285,[64287,64296],[65382,65437],[65440,65470],[66384,66421],68096,[68112,68115],[68297,68324],[68864,68899],[69424,69445],[69635,69687],[69763,69807],[69891,69926],69956,69959,[69968,70002],[70019,70066],[70081,70084],70106,[70163,70187],[70320,70366],70461,[70493,70497],[70656,70708],[70727,70730],[70751,70753],[70784,70831],[70852,70853],[71040,71086],[71128,71131],[71168,71215],[71296,71338],71352,[71680,71723],[71840,71903],[71960,71983],71999,72001,[72106,72144],72161,72163,72192,[72203,72242],72250,72272,[72284,72329],[72714,72750],72768,[72971,73008],73030,[73066,73097],73112,[73440,73458],[92928,92975],94032,[94099,94111],94179,[123191,123197],[123584,123627],[125184,125251],125259],[[48,57],95,183,[768,884],[902,906],[1155,1159],[1425,1469],1471,[1473,1474],[1476,1477],1479,[1552,1562],[1568,1641],[1646,1747],[1749,1756],[1759,1768],[1770,1788],[1808,1866],[1869,1969],[1984,2037],2045,[2048,2093],[2112,2139],[2259,2273],[2275,2403],[2406,2415],[2417,2435],[2492,2500],[2503,2504],[2507,2510],2519,[2527,2531],[2534,2545],2558,[2561,2563],2620,[2622,2626],[2631,2632],[2635,2637],2641,[2662,2677],[2689,2691],[2748,2757],[2759,2761],[2763,2765],[2784,2787],[2790,2799],[2809,2815],[2817,2819],[2876,2884],[2887,2888],[2891,2893],[2901,2903],[2911,2915],[2918,2927],[2946,2947],[3006,3010],[3014,3016],[3018,3021],3031,[3046,3055],[3072,3084],[3133,3140],[3142,3144],[3146,3149],[3157,3158],[3168,3171],[3174,3183],[3200,3203],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3296,3299],[3302,3311],[3328,3340],[3346,3396],[3398,3400],[3402,3406],[3412,3415],[3423,3427],[3430,3439],[3457,3459],3530,[3535,3540],3542,[3544,3551],[3558,3567],[3570,3571],[3585,3642],[3648,3662],[3664,3673],[3751,3773],[3784,3789],[3792,3801],[3864,3865],[3872,3881],3893,3895,3897,[3902,3911],[3953,3972],[3974,3991],[3993,4028],4038,[4096,4169],[4176,4253],[4957,4959],[4969,4977],[5902,5908],[5920,5940],[5952,5971],[6002,6003],[6016,6099],[6108,6109],[6112,6121],[6155,6157],[6160,6169],[6272,6314],[6432,6443],[6448,6459],[6470,6509],[6608,6618],[6656,6683],[6688,6750],[6752,6780],[6783,6793],[6800,6809],[6832,6845],[6847,6848],[6912,6987],[6992,7001],[7019,7027],[7040,7155],[7168,7223],[7232,7241],[7245,7293],[7376,7378],[7380,7418],[7424,7673],[7675,7957],[8255,8256],8276,[8400,8412],8417,[8421,8432],[11499,11507],[11647,11670],[11744,11775],[12321,12335],[12441,12442],[42512,42539],[42560,42607],[42612,42621],[42623,42737],[42997,43047],43052,[43136,43205],[43216,43225],[43232,43255],[43261,43309],[43312,43347],[43392,43456],[43471,43481],[43488,43518],[43520,43574],[43584,43597],[43600,43609],[43642,43714],[43744,43759],[43762,43766],[43888,44010],[44012,44013],[44016,44025],[64285,64296],[65024,65039],[65056,65071],[65075,65076],[65101,65103],[65296,65305],65343,[65382,65470],66045,66272,[66384,66426],[66720,66729],[68096,68099],[68101,68102],[68108,68115],[68152,68154],68159,[68297,68326],[68864,68903],[68912,68921],[69291,69292],[69424,69456],[69632,69702],[69734,69743],[69759,69818],[69872,69881],[69888,69940],[69942,69951],[69956,69959],[69968,70003],[70016,70084],[70089,70092],[70094,70106],[70163,70199],70206,[70320,70378],[70384,70393],[70400,70403],[70459,70468],[70471,70472],[70475,70477],70487,[70493,70499],[70502,70508],[70512,70516],[70656,70730],[70736,70745],[70750,70753],[70784,70853],[70864,70873],[71040,71093],[71096,71104],[71128,71133],[71168,71232],[71248,71257],[71296,71352],[71360,71369],[71453,71467],[71472,71481],[71680,71738],[71840,71913],[71960,71989],[71991,71992],[71995,72003],[72016,72025],[72106,72151],[72154,72161],[72163,72164],[72192,72254],72263,[72272,72345],[72714,72758],[72760,72768],[72784,72793],[72850,72871],[72873,72886],[72971,73014],73018,[73020,73021],[73023,73031],[73040,73049],[73066,73102],[73104,73105],[73107,73112],[73120,73129],[73440,73462],[92768,92777],[92912,92916],[92928,92982],[93008,93017],[94031,94087],[94095,94111],[94179,94180],[94192,94193],[113821,113822],[119141,119145],[119149,119154],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[120782,120831],[121344,121398],[121403,121452],121461,121476,[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[123184,123197],[123200,123209],[123584,123641],[125136,125142],[125184,125259],[125264,125273],[130032,130041],[917760,917999]]]"
	);
	flag_each(Common, FLAGS.XID_Start | FLAGS.XID_Continue);
	flag_each(Start, FLAGS.XID_Start);
	flag_each(Continue, FLAGS.XID_Continue);
	function flag_each(arr: InitRange[], flag: number) {
		for (var i = 0, j = 0; i < arr.length; i++) {
			if (typeof arr[i] === "number") XID[arr[i] as number] = flag;
			else for (j = arr[i][0]; j <= arr[i][1]; j++) XID[j] = flag;
		}
	}
}

export function is_UNICODE_XID_Start(code: number) {
	__DEV__: assert(code > 127);
	if (false === did_init) INIT_UNICODE();
	return (XID[code] & FLAGS.XID_Start) !== 0;
}

export function is_UNICODE_XID_Continue(code: number) {
	__DEV__: assert(code > 127);
	if (false === did_init) INIT_UNICODE();
	return (XID[code] & FLAGS.XID_Continue) !== 0;
}

// function peekUnicode(i: number = 0): number {
// 	const curr = peek(i);
// 	__DEV__: assert(curr >= 128, "Unexpected call peekUnicode() for an ASCII character");
// 	if (curr >= Unicode.hiSu0 && curr <= Unicode.loSu1) {
// 		const next = pos + i - 1 < src.length ? peek(i + 1) : 0;
// 		if (curr < Unicode.loSu0 && next >= Unicode.loSu0 && next <= Unicode.loSu1)
// 			return (curr - Unicode.hiSu0) * 1024 + next - Unicode.loSu0 + 65536;
// 		const prev = pos + i - 1 > 0 ? peek(i - 1) : 0;
// 		if (prev >= Unicode.hiSu0 && prev <= Unicode.hiSu1) return (prev - Unicode.hiSu0) * 1024 + curr - Unicode.loSu0 + 65536;
// 	}
// 	return curr; // doesn't handle >2 length emojis
// }
